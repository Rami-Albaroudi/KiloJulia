-- MySQL Script generated by MySQL Workbench
-- Sun Apr 14 15:40:58 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema KiloJulia
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema KiloJulia
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `KiloJulia` DEFAULT CHARACTER SET utf8 ;
USE `KiloJulia` ;

-- -----------------------------------------------------
-- Table `KiloJulia`.`Person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Person` (
  `personID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `sex` ENUM('Male', 'Female') NOT NULL,
  `age` INT UNSIGNED NOT NULL,
  `preferredUnits` ENUM('Imperial', 'Metric') NOT NULL,
  `metricHeight` DECIMAL(5,2) UNSIGNED NOT NULL,
  `metricWeight` DECIMAL(5,2) UNSIGNED NOT NULL,
  `imperialHeight` VARCHAR(10) NOT NULL,
  `imperialWeight` DECIMAL(5,2) UNSIGNED NOT NULL,
  `activityLevel` ENUM('Sedentary', 'Light', 'Moderate', 'High', 'Athlete') NOT NULL,
  `bmrCalories` INT GENERATED ALWAYS AS (CASE
        WHEN sex = 'Male' THEN ROUND(10 * metricWeight + 6.25 * metricHeight - 5 * age + 5)
        WHEN sex = 'Female' THEN ROUND(10 * metricWeight + 6.25 * metricHeight - 5 * age - 161)
    END) STORED,
  `bmrKilojoules` INT GENERATED ALWAYS AS (bmrCalories * 4.184) STORED,
  `tdeeCalories` INT GENERATED ALWAYS AS (CASE
      WHEN activityLevel = 'Sedentary' THEN ROUND(bmrCalories * 1.2 * 1.1)
      WHEN activityLevel = 'Light' THEN ROUND(bmrCalories * 1.38 * 1.1)
      WHEN activityLevel = 'Moderate' THEN ROUND(bmrCalories * 1.55 * 1.1)
      WHEN activityLevel = 'High' THEN ROUND(bmrCalories * 1.73 * 1.1)
      WHEN activityLevel = 'Athlete' THEN ROUND(bmrCalories * 2 * 1.1)
    END) STORED,
  `tdeeKilojoules` INT GENERATED ALWAYS AS (tdeeCalories * 4.184) STORED,
  `bmi` DECIMAL(4,2) GENERATED ALWAYS AS (metricWeight / POWER(metricHeight / 100, 2)) STORED,
  PRIMARY KEY (`personID`));


-- -----------------------------------------------------
-- Table `KiloJulia`.`Days`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Days` (
  `dayID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `date` DATE NOT NULL DEFAULT CURRENT_DATE,
  `totalCalories` INT UNSIGNED NULL DEFAULT 0,
  `totalKilojoules` INT GENERATED ALWAYS AS (totalCalories * 4.184) STORED,
  `tdeeCalories` INT UNSIGNED NULL DEFAULT NULL,
  `tdeeKilojoules` INT UNSIGNED NULL DEFAULT NULL,
  `calorieBalance` INT GENERATED ALWAYS AS (tdeeCalories - totalCalories) STORED,
  `kilojouleBalance` INT GENERATED ALWAYS AS (tdeeKilojoules - totalKilojoules) STORED,
  PRIMARY KEY (`dayID`),
  UNIQUE INDEX (`date` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `KiloJulia`.`PersonDays`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`PersonDays` (
  `personID` INT NOT NULL,
  `dayID` INT NOT NULL,
  PRIMARY KEY (`personID`, `dayID`),
  INDEX `fk_person_day_day` (`dayID` ASC) VISIBLE,
  CONSTRAINT `fk_person_day_person`
    FOREIGN KEY (`personID`)
    REFERENCES `KiloJulia`.`Person` (`personID`),
  CONSTRAINT `fk_person_day_day`
    FOREIGN KEY (`dayID`)
    REFERENCES `KiloJulia`.`Days` (`dayID`));


-- -----------------------------------------------------
-- Table `KiloJulia`.`Foods`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Foods` (
  `foodID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `category` ENUM('Fruits', 'Vegetables', 'Seafood', 'Dairy', 'Mushrooms', 'Grains', 'Meat', 'Spices', 'Nuts', 'Greens', 'Sweets', 'Oils and Sauces', 'Beverages', 'Soups', 'Baked Products', 'Fast Foods', 'Meals and Recipes', 'Other') NOT NULL,
  `caloriesPer100g` DECIMAL(10,2) UNSIGNED NOT NULL,
  `kilojoulesPer100g` DECIMAL(10,2) GENERATED ALWAYS AS (caloriesPer100g * 4.184) STORED,
  PRIMARY KEY (`foodID`),
  UNIQUE INDEX `uc_food_name` (`name` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `KiloJulia`.`Measurements`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Measurements` (
  `measurementID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `type` ENUM('Customary', 'Metric', 'Other') NOT NULL,
  `name` ENUM('Pounds', 'Ounces', 'Quarts', 'Pints', 'Gallons', 'Cups', 'Tablespoons', 'Teaspoons', 'Kilograms', 'Grams', 'Litres', 'Millilitres', 'Dash', 'Pinch', 'Custom') NOT NULL,
  `weightInGrams` DECIMAL(10,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`measurementID`));


-- -----------------------------------------------------
-- Table `KiloJulia`.`Entries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Entries` (
  `entryID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `dayID` INT NOT NULL,
  `foodID` INT NOT NULL,
  `measurementID` INT NOT NULL,
  `quantity` DECIMAL(10,2) UNSIGNED NOT NULL DEFAULT 1,
  `calories` INT GENERATED ALWAYS AS (CASE 
      WHEN Measurements.name = 'Custom' THEN COALESCE(customCalories, 0)
      ELSE ROUND(Foods.caloriesPer100g * (Measurements.weightInGrams / 100) * quantity, 0)
    END) STORED,
  `kilojoules` INT GENERATED ALWAYS AS (CASE
      WHEN Measurements.name = 'Custom' THEN ROUND(COALESCE(customCalories, 0) * 4.184, 0) 
      ELSE ROUND(Foods.kilojoulesPer100g * (Measurements.weightInGrams / 100) * quantity, 0)
    END) STORED,
  `customCalories` INT UNSIGNED NULL DEFAULT NULL,
  `description` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`entryID`),
  INDEX `idx_entry_day` (`dayID` ASC) VISIBLE,
  INDEX `idx_entry_food` (`foodID` ASC) VISIBLE,
  INDEX `idx_entry_measurement` (`measurementID` ASC) VISIBLE,
  CONSTRAINT `fk_entry_day`
    FOREIGN KEY (`dayID`)
    REFERENCES `KiloJulia`.`Days` (`dayID`),
  CONSTRAINT `fk_entry_food`
    FOREIGN KEY (`foodID`)
    REFERENCES `KiloJulia`.`Foods` (`foodID`),
  CONSTRAINT `fk_entry_measurement`
    FOREIGN KEY (`measurementID`)
    REFERENCES `KiloJulia`.`Measurements` (`measurementID`));


-- -----------------------------------------------------
-- Table `KiloJulia`.`Exercises`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Exercises` (
  `exerciseID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `dayID` INT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `calories` INT NOT NULL,
  `kilojoules` INT GENERATED ALWAYS AS (calories * 4.184) STORED,
  PRIMARY KEY (`exerciseID`),
  INDEX `idx_exercise_day` (`dayID` ASC) VISIBLE,
  CONSTRAINT `fk_exercise_day`
    FOREIGN KEY (`dayID`)
    REFERENCES `KiloJulia`.`Days` (`dayID`));


-- -----------------------------------------------------
-- Table `KiloJulia`.`Recipes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`Recipes` (
  `recipeID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `instructions` TEXT NULL DEFAULT NULL,
  `servings` INT UNSIGNED NOT NULL DEFAULT 1,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `calories` INT UNSIGNED NULL DEFAULT NULL,
  `kilojoules` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`recipeID`));


-- -----------------------------------------------------
-- Table `KiloJulia`.`RecipeIngredients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KiloJulia`.`RecipeIngredients` (
  `recipeIngredientID` INT NULL DEFAULT NULL AUTO_INCREMENT,
  `recipeID` INT NOT NULL,
  `foodID` INT NOT NULL,
  `measurementID` INT NOT NULL,
  `quantity` DECIMAL(10,2) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`recipeIngredientID`),
  INDEX `fk_recipe_ingredient_recipe` (`recipeID` ASC) VISIBLE,
  INDEX `fk_recipe_ingredient_food` (`foodID` ASC) VISIBLE,
  INDEX `fk_recipe_ingredient_measurement` (`measurementID` ASC) VISIBLE,
  CONSTRAINT `fk_recipe_ingredient_recipe`
    FOREIGN KEY (`recipeID`)
    REFERENCES `KiloJulia`.`Recipes` (`recipeID`),
  CONSTRAINT `fk_recipe_ingredient_food`
    FOREIGN KEY (`foodID`)
    REFERENCES `KiloJulia`.`Foods` (`foodID`),
  CONSTRAINT `fk_recipe_ingredient_measurement`
    FOREIGN KEY (`measurementID`)
    REFERENCES `KiloJulia`.`Measurements` (`measurementID`));

USE `KiloJulia`;

DELIMITER $$
USE `KiloJulia`$$
CREATE TRIGGER calculate_recipe_calories_kilojoules
AFTER INSERT ON RecipeIngredients
FOR EACH ROW
BEGIN
  DECLARE total_calories INT;
  DECLARE total_kilojoules INT;

  SELECT SUM(ROUND(Foods.caloriesPer100g * (Measurements.weightInGrams / 100) * RecipeIngredients.quantity, 0)) INTO total_calories
  FROM RecipeIngredients 
  JOIN Foods ON RecipeIngredients.foodID = Foods.foodID
  JOIN Measurements ON RecipeIngredients.measurementID = Measurements.measurementID
  WHERE RecipeIngredients.recipeID = NEW.recipeID;

  SET total_kilojoules = total_calories * 4.184;

  UPDATE Recipes 
  SET calories = total_calories, kilojoules = total_kilojoules
  WHERE recipeID = NEW.recipeID;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
