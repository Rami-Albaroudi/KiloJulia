<!--
Citation for the following code:
Date: 06/06/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Primarily original work with some code snippets/functions adapted from:
https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
https://bobbyhadz.com/blog/post-form-data-using-javascript-fetch-api
https://bobbyhadz.com/blog/add-onclick-event-to-table-row-in-javascript
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
https://tutorial.eyehunts.com/js/javascript-confirm-delete-before-delete-code/
-->

{% extends "template.j2" %}

{% block title %}Staff{% endblock %}

{% block content %}

<h3>Staff Listing</h3>

<!-- Dynamic table to display Staff records using READ operation. Includes Edit and Delete functionality. -->
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Capacity</th>
            <th>Note</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for staff in staff %}
        <tr id="staff-{{ staff.staffID }}">
            <td>{{ staff.staffID }}</td>
            <td>{{ staff.staffName }}</td>
            <td>{{ staff.staffEmail }}</td>
            <td>{{ staff.staffCapacity }}</td>
            <td>{{ staff.staffNote }}</td>
            <td>
                <button onclick="editStaff({{ staff.staffID }})">Edit</button>
            </td>
            <td>
                <button onclick="confirmDelete({{ staff.staffID }})">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<!-- Form to CREATE entries in the Staff table -->
<form method="POST" action="{{ url_for('staff') }}" onsubmit="return addStaff(event)">
    <h3>Add Staff</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Capacity</th>
                <th>Note</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="text" id="staffName" name="staffName" required></td>
                <td><input type="email" id="staffEmail" name="staffEmail" required></td>
                <td>
                    <select id="staffCapacity" name="staffCapacity" required>
                        <option value="Available">Available</option>
                        <option value="Not Available">Not Available</option>
                    </select>
                </td>
                <td><input type="text" id="staffNote" name="staffNote"></td>
                <td><button type="submit">Add</button></td>
            </tr>
        </tbody>
    </table>
</form>

<script>
    // Function to change the display of the table rows when they are being edited
    function editStaff(staffID) {
        const row = document.getElementById('staff-' + staffID);
        const [_, staffNameCell, staffEmailCell, staffCapacityCell, staffNoteCell, actionCell] = row.cells;
        // Stores the original values in case the edit is cancelled
        row.dataset.originalName = staffNameCell.innerText;
        row.dataset.originalEmail = staffEmailCell.innerText;
        row.dataset.originalCapacity = staffCapacityCell.innerText;
        row.dataset.originalNote = staffNoteCell.innerText;
        staffNameCell.innerHTML = `<input type="text" value="${staffNameCell.innerText}">`;
        staffEmailCell.innerHTML = `<input type="email" value="${staffEmailCell.innerText}">`;
        staffCapacityCell.innerHTML = `
        <select>
            <option value="Available">Available</option>
            <option value="Not Available">Not Available</option>
        </select>
    `;
        staffNoteCell.innerHTML = `<input type="text" value="${staffNoteCell.innerText}">`;
        actionCell.innerHTML = `
        <button onclick="updateStaff(${staffID})">Update</button>
        <button onclick="cancelEdit(${staffID})">Cancel</button>
    `;
    }

    // Function to restore the row values if an edit is cancelled
    function cancelEdit(staffID) {
        const row = document.getElementById('staff-' + staffID);
        const [_, staffNameCell, staffEmailCell, staffCapacityCell, staffNoteCell, actionCell] = row.cells;
        // Restore the original values
        staffNameCell.innerText = row.dataset.originalName;
        staffEmailCell.innerText = row.dataset.originalEmail;
        staffCapacityCell.innerText = row.dataset.originalCapacity;
        staffNoteCell.innerText = row.dataset.originalNote;
        actionCell.innerHTML = `<button onclick="editStaff(${staffID})">Edit</button>`;
    }

    // Function to UPDATE entries in the Staff table using the editable table cells
    function updateStaff(staffID) {
        const row = document.getElementById('staff-' + staffID);
        const [_, staffNameCell, staffEmailCell, staffCapacityCell, staffNoteCell, actionCell] = row.cells;
        const staffName = staffNameCell.firstElementChild.value;
        const staffEmail = staffEmailCell.firstElementChild.value;
        const staffCapacity = staffCapacityCell.firstElementChild.value;
        const staffNote = staffNoteCell.firstElementChild.value;

        fetch(`/updatestaff/${staffID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `staffName=${encodeURIComponent(staffName)}&staffEmail=${encodeURIComponent(staffEmail)}&staffCapacity=${encodeURIComponent(staffCapacity)}&staffNote=${encodeURIComponent(staffNote)}`
        })
            .then(response => {
                if (response.ok) {
                    staffNameCell.innerText = staffName;
                    staffEmailCell.innerText = staffEmail;
                    staffCapacityCell.innerText = staffCapacity;
                    staffNoteCell.innerText = staffNote;
                    actionCell.innerHTML = `<button onclick="editStaff(${staffID})">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    // Function to CREATE entries in the Staff table
    function addStaff(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to add staff member. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add staff member.');
            });

        return false;
    }

    // Function to DELETE entries in the Staff table
    function confirmDelete(staffID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/deletestaff/${staffID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('staff-' + staffID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }
</script>

{% endblock %}