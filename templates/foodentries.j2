<!--
Citation for the following code:
Date: 06/06/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Primarily original work with some code snippets/functions adapted from:
https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
https://bobbyhadz.com/blog/post-form-data-using-javascript-fetch-api
https://bobbyhadz.com/blog/add-onclick-event-to-table-row-in-javascript
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
https://tutorial.eyehunts.com/js/javascript-confirm-delete-before-delete-code/
-->

{% extends "template.j2" %}

{% block title %}Food Entries{% endblock %}

{% block content %}
<h3>Food Entries Listing</h3>
<h4 style="text-align: center;"><i><b>Instructions:</b> You cannot modify a food entry's associated client or tracked
        day directly. Please delete and re-create the entry if those fields are incorrect. Food Name can be set to
        null/none, but cannot be swapped.</i></h4>

<!-- Dynamic table to display FoodEntries records using READ operation. Includes Edit and Delete functionality. -->
<table>
    <thead>
        <tr>
            <th>Food Entry ID</th>
            <th>Tracked Day Date</th>
            <th>Client Name</th>
            <th>Food Name</th>
            <th>Weight (g)</th>
            <th>Calories</th>
            <th>Note</th>
            <th>Edit</th>
            <th>Remove Food</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for foodentry in foodentries %}
        <tr id="foodentry-{{ foodentry.foodEntryID }}">
            <td>{{ foodentry.foodEntryID }}</td>
            <td>{{ foodentry.trackedDayDate }}</td>
            <td>{{ foodentry.clientName }}</td>
            <td>{{ foodentry.foodName }}</td>
            <td>{{ foodentry.foodEntryGramWeight }}</td>
            <td>{{ foodentry.foodEntryCalories }}</td>
            <td>{{ foodentry.foodEntryNote }}</td>
            <td>
                <button onclick="editFoodEntry({{ foodentry.foodEntryID }})">Edit</button>
            </td>
            <td>
                <button onclick="setFoodNull({{ foodentry.foodEntryID }})">Remove Food</button>
            </td>
            <td>
                <button onclick="confirmDelete({{ foodentry.foodEntryID }})">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Add Food Entry</h3>
<h4 style="text-align: center;"><i><b>Instructions:</b> You must first create the tracked day entry before attempting
        to add a food entry to that tracked day's log.</i></h4>
<!-- Form to CREATE entries in the FoodEntries table -->
<form method="POST" action="{{ url_for('addfoodentry') }}" onsubmit="return addFoodEntry(event)">
    <table>
        <thead>
            <tr>
                <th>Tracked Day Date</th>
                <th>Client Name</th>
                <th>Food Name</th>
                <th>Weight (g)</th>
                <th>Calories</th>
                <th>Note</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="date" id="trackedDayDate" name="trackedDayDate" required></td>
                <td>
                    <input type="text" id="searchClient" name="clientName" list="clientNames"
                        placeholder="Search Clients..." required>
                    <datalist id="clientNames">
                        {% for client in clients %}
                        <option value="{{ client.clientName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td>
                    <input type="text" id="searchFood" name="foodName" list="foodNames"
                        placeholder="Search Foods or leave blank for none...">
                    <datalist id="foodNames">
                        {% for food in foods %}
                        <option value="{{ food.foodName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td><input type="number" id="gramWeight" name="gramWeight" required min="1"></td>
                <td><input type="number" id="calories" name="calories" required min="1"></td>
                <td><input type="text" id="note" name="note"></td>
                <td colspan="5"><button type="submit">Add</button></td>
            </tr>
        </tbody>
    </table>
</form>

<script>
    // Function to change the display of the table rows when they are being edited
    function editFoodEntry(foodEntryID) {
        const row = document.getElementById('foodentry-' + foodEntryID);
        const [_, trackedDayDateCell, clientNameCell, foodNameCell, gramWeightCell, caloriesCell, noteCell, actionCell] = row.cells;
        // Stores the original values in case the edit is cancelled
        row.dataset.originalGramWeight = gramWeightCell.innerText;
        row.dataset.originalCalories = caloriesCell.innerText;
        row.dataset.originalNote = noteCell.innerText;
        gramWeightCell.innerHTML = `<input type="number" value="${gramWeightCell.innerText}" min="1" required>`;
        caloriesCell.innerHTML = `<input type="number" value="${caloriesCell.innerText}" min="1" required>`;
        noteCell.innerHTML = `<input type="text" value="${noteCell.innerText}">`;
        actionCell.innerHTML = `
        <button onclick="updateFoodEntry(${foodEntryID})">Update</button>
        <button onclick="cancelEdit(${foodEntryID})">Cancel</button>
    `;
    }

    // Function to restore the row values if an edit is cancelled
    function cancelEdit(foodEntryID) {
        const row = document.getElementById('foodentry-' + foodEntryID);
        const [_, trackedDayDateCell, clientNameCell, foodNameCell, gramWeightCell, caloriesCell, noteCell, actionCell] = row.cells;
        // Restore the original values
        gramWeightCell.innerText = row.dataset.originalGramWeight;
        caloriesCell.innerText = row.dataset.originalCalories;
        noteCell.innerText = row.dataset.originalNote;
        actionCell.innerHTML = `<button onclick="editFoodEntry(${foodEntryID})">Edit</button>`;
    }

    // Function to UPDATE entries in the FoodEntries table using the editable table cells
    function updateFoodEntry(foodEntryID) {
        const row = document.getElementById('foodentry-' + foodEntryID);
        const [_, trackedDayDateCell, clientNameCell, foodNameCell, gramWeightCell, caloriesCell, noteCell, actionCell] = row.cells;
        const gramWeight = gramWeightCell.firstElementChild.value;
        const calories = caloriesCell.firstElementChild.value;
        const note = noteCell.firstElementChild.value;

        // Validate the input values
        if (!gramWeight || gramWeight < 1) {
            alert('Weight must be at least 1 gram.');
            return;
        }
        if (!calories || calories < 1) {
            alert('Calories must be at least 1.');
            return;
        }

        fetch(`/updatefoodentry/${foodEntryID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `gramWeight=${encodeURIComponent(gramWeight)}&calories=${encodeURIComponent(calories)}&note=${encodeURIComponent(note)}`
        })
            .then(response => {
                if (response.ok) {
                    gramWeightCell.innerText = gramWeight;
                    caloriesCell.innerText = calories;
                    noteCell.innerText = note;
                    actionCell.innerHTML = `<button onclick="editFoodEntry(${foodEntryID})">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    // Function to set Food FK to NULL for a record in the FoodEntries table
    function setFoodNull(foodEntryID) {
        let row = document.getElementById('foodentry-' + foodEntryID);
        let cells = row.getElementsByTagName('td');
        let foodName = cells[3].innerText;
        if (foodName.trim() === "None") {
            alert("This entry already has no associated food record.");
            return;
        }

        if (confirm('Are you sure you want to remove the food from this entry?')) {
            fetch(`/setfoodnull/${foodEntryID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        cells[3].innerText = 'None'; // Clear the food name cell for the UI
                    } else {
                        response.text().then(error => alert('Failed to remove food. ' + error));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to remove food.');
                });
        }
    }

    // Function to CREATE entries in the FoodEntries table
    function addFoodEntry(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to add food entry. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add food entry.');
            });

        return false;
    }

    // Function to DELETE entries in the FoodEntries table
    function confirmDelete(foodEntryID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/deletefoodentry/${foodEntryID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('foodentry-' + foodEntryID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }


</script>


{% endblock %}