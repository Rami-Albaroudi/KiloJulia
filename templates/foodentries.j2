<!--
Citation for the following code:
Date: 06/06/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Original work with some Jinja expressions adapted from https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
-->

{% extends "template.j2" %}

{% block title %}Food Entries{% endblock %}

{% block content %}
<h3>Food Entries Listing</h3>
<h4 style="text-align: center;"><i><b>Instructions:</b> You cannot modify a food entry's associated client or tracked
        day directly. Please delete and re-create the entry if those fields are incorrect. Food Name can be set to
        null/none, but cannot be swapped.</i></h4>
<table>
    <thead>
        <tr>
            <th>Food Entry ID</th>
            <th>Tracked Day Date</th>
            <th>Client Name</th>
            <th>Food Name</th>
            <th>Weight (g)</th>
            <th>Calories</th>
            <th>Note</th>
            <th>Edit</th>
            <th>Remove Food</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for foodentry in foodentries %}
        <tr id="foodentry-{{ foodentry.foodEntryID }}">
            <td>{{ foodentry.foodEntryID }}</td>
            <td>{{ foodentry.trackedDayDate }}</td>
            <td>{{ foodentry.clientName }}</td>
            <td>{{ foodentry.foodName }}</td>
            <td>{{ foodentry.foodEntryGramWeight }}</td>
            <td>{{ foodentry.foodEntryCalories }}</td>
            <td>{{ foodentry.foodEntryNote }}</td>
            <td>
                <button onclick="editFoodEntry({{ foodentry.foodEntryID }})">Edit</button>
            </td>
            <td>
                <button onclick="setFoodNull({{ foodentry.foodEntryID }})">Remove Food</button>
            </td>
            <td>
                <button onclick="confirmDelete({{ foodentry.foodEntryID }})">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Add Food Entry</h3>
<h4 style="text-align: center;"><i><b>Instructions:</b> You must first create the tracked day entry before attempting
        to add a food entry to that tracked day's log.</i></h4>
<form method="POST" action="{{ url_for('add_food_entry') }}" onsubmit="return addFoodEntry(event)">
    <table>
        <thead>
            <tr>
                <th>Tracked Day Date</th>
                <th>Client Name</th>
                <th>Food Name</th>
                <th>Weight (g)</th>
                <th>Calories</th>
                <th>Note</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="date" id="trackedDayDate" name="trackedDayDate" required></td>
                <td>
                    <input type="text" id="searchClient" name="clientName" list="clientNames"
                        placeholder="Search Clients..." required>
                    <datalist id="clientNames">
                        {% for client in clients %}
                        <option value="{{ client.clientName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td>
                    <input type="text" id="searchFood" name="foodName" list="foodNames" placeholder="Search Foods..."
                        required>
                    <datalist id="foodNames">
                        {% for food in foods %}
                        <option value="{{ food.foodName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td><input type="number" id="gramWeight" name="gramWeight" required min="1"></td>
                <td><input type="number" id="calories" name="calories" required min="1"></td>
                <td><input type="text" id="note" name="note"></td>
                <td colspan="5"><button type="submit">Add</button></td>
            </tr>
        </tbody>
    </table>
</form>

<script>
    function editFoodEntry(foodEntryID) {
        let row = document.getElementById('foodentry-' + foodEntryID);
        let cells = row.getElementsByTagName('td');

        let gramWeight = cells[4].innerText;
        let calories = cells[5].innerText;
        let note = cells[6].innerText;

        // Store the original values in case the edit is cancelled
        row.dataset.originalGramWeight = gramWeight;
        row.dataset.originalCalories = calories;
        row.dataset.originalNote = note;

        cells[4].innerHTML = '<input type="number" value="' + gramWeight + '" min="1" required>';
        cells[5].innerHTML = '<input type="number" value="' + calories + '" min="1" required>';
        cells[6].innerHTML = '<input type="text" value="' + note + '">';
        cells[7].innerHTML = `
            <button onclick="updateFoodEntry(${foodEntryID})">Update</button>
            <button onclick="cancelEdit(${foodEntryID})">Cancel</button>
        `;
    }

    function cancelEdit(foodEntryID) {
        let row = document.getElementById('foodentry-' + foodEntryID);
        let cells = row.getElementsByTagName('td');

        // Restore the original values
        cells[4].innerText = row.dataset.originalGramWeight;
        cells[5].innerText = row.dataset.originalCalories;
        cells[6].innerText = row.dataset.originalNote;

        cells[7].innerHTML = `<button onclick="editFoodEntry(${foodEntryID})">Edit</button>`;
    }

    function updateFoodEntry(foodEntryID) {
        let row = document.getElementById('foodentry-' + foodEntryID);
        let cells = row.getElementsByTagName('td');

        // Get the updated values from the input fields
        let gramWeight = cells[4].getElementsByTagName('input')[0].value;
        let calories = cells[5].getElementsByTagName('input')[0].value;
        let note = cells[6].getElementsByTagName('input')[0].value;

        // Validate the input values
        if (!gramWeight || gramWeight < 1) {
            alert('Weight must be at least 1 gram.');
            return;
        }
        if (!calories || calories < 1) {
            alert('Calories must be at least 1.');
            return;
        }

        fetch(`/update_food_entry/${foodEntryID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `gramWeight=${encodeURIComponent(gramWeight)}&calories=${encodeURIComponent(calories)}&note=${encodeURIComponent(note)}`
        })
            .then(response => {
                if (response.ok) {
                    cells[4].innerText = gramWeight;
                    cells[5].innerText = calories;
                    cells[6].innerText = note;
                    cells[7].innerHTML = `<button onclick="editFoodEntry(${foodEntryID})">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    function setFoodNull(foodEntryID) {
        let row = document.getElementById('foodentry-' + foodEntryID);
        let cells = row.getElementsByTagName('td');
        let foodName = cells[3].innerText;

        if (foodName.trim() === "None") {
            alert("This entry already has no associated food record.");
            return;
        }

        if (confirm('Are you sure you want to remove the food from this entry?')) {
            fetch(`/set_food_null/${foodEntryID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        // Optionally, update the UI to reflect the change
                        cells[3].innerText = 'None'; // Clear the food name cell
                    } else {
                        response.text().then(error => alert('Failed to remove food. ' + error));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to remove food.');
                });
        }
    }

    function confirmDelete(foodEntryID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/delete_food_entry/${foodEntryID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('foodentry-' + foodEntryID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }

    function addFoodEntry(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to add food entry. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add food entry.');
            });

        return false;
    }
</script>


{% endblock %}