<!--
Citation for the following code:
Date: 06/06/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Primarily original work with some code snippets/functions adapted from:
https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
https://bobbyhadz.com/blog/post-form-data-using-javascript-fetch-api
https://bobbyhadz.com/blog/add-onclick-event-to-table-row-in-javascript
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
https://tutorial.eyehunts.com/js/javascript-confirm-delete-before-delete-code/
-->

{% extends "template.j2" %}

{% block title %}Staff-Client Assignment{% endblock %}

{% block content %}

<h3>Staff-Client Assignment Listing</h3>

<!-- Dynamic table to display StaffClients records using READ operation. Includes Edit and Delete functionality. -->
<table>
    <thead>
        <tr>
            <th>Staff ID</th>
            <th>Staff Name</th>
            <th>Client ID</th>
            <th>Client Name</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for staffclient in staffclients %}
        <tr id="staffclient-{{ staffclient.staffID }}-{{ staffclient.clientID }}">
            <td>{{ staffclient.staffID }}</td>
            <td>{{ staffclient.staffName }}</td>
            <td>{{ staffclient.clientID }}</td>
            <td>{{ staffclient.clientName }}</td>
            <td>
                <button
                    onclick="editStaffclient('{{ staffclient.staffID }}', '{{ staffclient.clientID }}')">Edit</button>
            </td>
            <td>
                <button
                    onclick="confirmDelete('{{ staffclient.staffID }}', '{{ staffclient.clientID }}')">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<!-- Form to CREATE entries in the StaffClients Table -->
<form method="POST" action="{{ url_for('staffclients') }}" onsubmit="return addStaffClient(event)">
    <h3>Assign Staff to Client</h3>
    <table>
        <thead>
            <tr>
                <th>Staff Name</th>
                <th>Client Name</th>
                <th>Assign</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <input type="text" id="searchStaff" name="searchStaff" list="staffNames"
                        placeholder="Search Staff..." required>
                    <datalist id="staffNames">
                        {% for staff in staff %}
                        <option value="{{ staff.staffName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td>
                    <input type="text" id="searchClient" name="searchClient" list="clientNames"
                        placeholder="Search Clients..." required>
                    <datalist id="clientNames">
                        {% for client in clients %}
                        <option value="{{ client.clientName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td><button type="submit">Assign</button></td>
            </tr>
        </tbody>
    </table>
</form>

<script>
    // Function to change the display of the table rows when they are being edited
    function editStaffclient(staffID, clientID) {
        const row = document.getElementById('staffclient-' + staffID + '-' + clientID);
        const [_, staffNameCell, __, clientNameCell, actionCell] = row.cells;
        // Store the original values in case the edit is cancelled
        row.dataset.originalStaffName = staffNameCell.innerText;
        row.dataset.originalClientName = clientNameCell.innerText;
        staffNameCell.innerHTML = `<input type="text" value="${staffNameCell.innerText}" list="staffNames" placeholder="Search Staff..." required>`;
        clientNameCell.innerHTML = `<input type="text" value="${clientNameCell.innerText}" list="clientNames" placeholder="Search Clients..." required>`;
        actionCell.innerHTML = `
        <button onclick="updateStaffclient('${staffID}', '${clientID}')">Update</button>
        <button onclick="cancelEdit('${staffID}', '${clientID}')">Cancel</button>
    `;
    }

    // Function to restore the row values if an edit is cancelled
    function cancelEdit(staffID, clientID) {
        const row = document.getElementById('staffclient-' + staffID + '-' + clientID);
        const [_, staffNameCell, __, clientNameCell, actionCell] = row.cells;
        // Restore the original values
        staffNameCell.innerText = row.dataset.originalStaffName;
        clientNameCell.innerText = row.dataset.originalClientName;
        actionCell.innerHTML = `<button onclick="editStaffclient('${staffID}', '${clientID}')">Edit</button>`;
    }

    // Function to UPDATE entries in the StaffClients table using the editable table cells
    function updateStaffclient(staffID, clientID) {
        const row = document.getElementById('staffclient-' + staffID + '-' + clientID);
        const [_, staffNameCell, __, clientNameCell, actionCell] = row.cells;
        const staffName = staffNameCell.firstElementChild.value;
        const clientName = clientNameCell.firstElementChild.value;

        fetch(`/updatestaffclient/${staffID}/${clientID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `staffName=${encodeURIComponent(staffName)}&clientName=${encodeURIComponent(clientName)}`
        })
            .then(response => {
                if (response.ok) {
                    staffNameCell.innerText = staffName;
                    clientNameCell.innerText = clientName;
                    actionCell.innerHTML = `<button onclick="editStaffclient('${staffID}', '${clientID}')">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    // Function to CREATE entries in the StaffClients table
    function addStaffClient(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to assign staff to client. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to assign staff to client.');
            });

        return false;
    }

    // Function to DELETE entries in the StaffClients table
    function confirmDelete(staffID, clientID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/deletestaffclient/${staffID}/${clientID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('staffclient-' + staffID + '-' + clientID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }

</script>

{% endblock %}