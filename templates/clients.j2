<!--
Citation for the following code:
Date: 29/05/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Original work with some Jinja expressions adapted from https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
-->

{% extends "template.j2" %}

{% block title %}Clients{% endblock %}

{% block content %}

<h3>Clients Listing</h3>

<!-- Regular table to display Client records -->
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Sex</th>
            <th>Age</th>
            <th>Height (cm)</th>
            <th>Weight (kg)</th>
            <th>Activity Level</th>
            <th>Calorie Target</th>
            <th>Note</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for client in clients %}
        <tr id="client-{{ client.clientID }}">
            <td>{{ client.clientID }}</td>
            <td>{{ client.clientName }}</td>
            <td>{{ client.clientEmail }}</td>
            <td>{{ client.clientSex }}</td>
            <td>{{ client.clientAge }}</td>
            <td>{{ client.clientHeight }}</td>
            <td>{{ client.clientWeight }}</td>
            <td>{{ client.clientActivityLevel }}</td>
            <td>{{ client.clientCalorieTarget }}</td>
            <td>{{ client.clientNote }}</td>
            <td>
                <button onclick="editClient({{ client.clientID }})">Edit</button>
            </td>
            <td>
                <button onclick="confirmDelete({{ client.clientID }})">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<!-- Form to INSERT entries into the Client table -->
<form method="POST" action="{{ url_for('clients') }}" onsubmit="return addClient(event)">
    <h3>Add Client</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Sex</th>
                <th>Age</th>
                <th>Height (cm)</th>
                <th>Weight (kg)</th>
                <th>Activity Level</th>
                <th>Calorie Target</th>
                <th>Note</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="text" id="clientName" name="clientName" required></td>
                <td><input type="email" id="clientEmail" name="clientEmail" required></td>
                <td>
                    <select id="clientSex" name="clientSex" required>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </td>
                <td><input type="number" id="clientAge" name="clientAge" min="1" required></td>
                <td><input type="number" id="clientHeight" name="clientHeight" step="0.1" min="0.1" required></td>
                <td><input type="number" id="clientWeight" name="clientWeight" step="0.1" min="0.1" required></td>
                <td>
                    <select id="clientActivityLevel" name="clientActivityLevel" required>
                        <option value="Sedentary">Sedentary</option>
                        <option value="Light">Light</option>
                        <option value="Moderate">Moderate</option>
                        <option value="High">High</option>
                        <option value="Athlete">Athlete</option>
                    </select>
                </td>
                <td><input type="number" id="clientCalorieTarget" name="clientCalorieTarget" min="1" required></td>
                <td><input type="text" id="clientNote" name="clientNote"></td>
                <td><button type="submit">Add</button></td>
            </tr>
        </tbody>
    </table>
</form>

<script>
    // Function to change the display of the table rows when they are being edited
    function editClient(clientID) {
        const row = document.getElementById('client-' + clientID);
        const [_, clientNameCell, clientEmailCell, clientSexCell, clientAgeCell, clientHeightCell, clientWeightCell, clientActivityLevelCell, clientCalorieTargetCell, clientNoteCell, actionCell] = row.cells;

        // Store the original values in case the edit is cancelled
        row.dataset.originalName = clientNameCell.innerText;
        row.dataset.originalEmail = clientEmailCell.innerText;
        row.dataset.originalSex = clientSexCell.innerText;
        row.dataset.originalAge = clientAgeCell.innerText;
        row.dataset.originalHeight = clientHeightCell.innerText;
        row.dataset.originalWeight = clientWeightCell.innerText;
        row.dataset.originalActivityLevel = clientActivityLevelCell.innerText;
        row.dataset.originalCalorieTarget = clientCalorieTargetCell.innerText;
        row.dataset.originalNote = clientNoteCell.innerText;

        clientNameCell.innerHTML = `<input type="text" value="${clientNameCell.innerText}">`;
        clientEmailCell.innerHTML = `<input type="email" value="${clientEmailCell.innerText}">`;
        clientSexCell.innerHTML = `
        <select>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
        </select>
    `;
        clientAgeCell.innerHTML = `<input type="number" value="${clientAgeCell.innerText}">`;
        clientHeightCell.innerHTML = `<input type="number" step="0.1" value="${clientHeightCell.innerText}">`;
        clientWeightCell.innerHTML = `<input type="number" step="0.1" value="${clientWeightCell.innerText}">`;
        clientActivityLevelCell.innerHTML = `
        <select>
            <option value="Sedentary">Sedentary</option>
            <option value="Light">Light</option>
            <option value="Moderate">Moderate</option>
            <option value="High">High</option>
            <option value="Athlete">Athlete</option>
        </select>
    `;
        clientCalorieTargetCell.innerHTML = `<input type="number" value="${clientCalorieTargetCell.innerText}">`;
        clientNoteCell.innerHTML = `<input type="text" value="${clientNoteCell.innerText}">`;
        actionCell.innerHTML = `
        <button onclick="updateClient(${clientID})">Update</button>
        <button onclick="cancelEdit(${clientID})">Cancel</button>
    `;
    }

    // Restore the row values if the edit is cancelled
    function cancelEdit(clientID) {
        const row = document.getElementById('client-' + clientID);
        const [_, clientNameCell, clientEmailCell, clientSexCell, clientAgeCell, clientHeightCell, clientWeightCell, clientActivityLevelCell, clientCalorieTargetCell, clientNoteCell, actionCell] = row.cells;

        // Restore the original values
        clientNameCell.innerText = row.dataset.originalName;
        clientEmailCell.innerText = row.dataset.originalEmail;
        clientSexCell.innerText = row.dataset.originalSex;
        clientAgeCell.innerText = row.dataset.originalAge;
        clientHeightCell.innerText = row.dataset.originalHeight;
        clientWeightCell.innerText = row.dataset.originalWeight;
        clientActivityLevelCell.innerText = row.dataset.originalActivityLevel;
        clientCalorieTargetCell.innerText = row.dataset.originalCalorieTarget;
        clientNoteCell.innerText = row.dataset.originalNote;

        actionCell.innerHTML = `<button onclick="editClient(${clientID})">Edit</button>`;
    }

    // Function to UPDATE entries in the Client table
    function updateClient(clientID) {
        const row = document.getElementById('client-' + clientID);
        const [_, clientNameCell, clientEmailCell, clientSexCell, clientAgeCell, clientHeightCell, clientWeightCell, clientActivityLevelCell, clientCalorieTargetCell, clientNoteCell, actionCell] = row.cells;

        const clientName = clientNameCell.firstElementChild.value;
        const clientEmail = clientEmailCell.firstElementChild.value;
        const clientSex = clientSexCell.firstElementChild.value;
        const clientAge = clientAgeCell.firstElementChild.value;
        const clientHeight = clientHeightCell.firstElementChild.value;
        const clientWeight = clientWeightCell.firstElementChild.value;
        const clientActivityLevel = clientActivityLevelCell.firstElementChild.value;
        const clientCalorieTarget = clientCalorieTargetCell.firstElementChild.value;
        const clientNote = clientNoteCell.firstElementChild.value;

        fetch(`/updateclient/${clientID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `clientName=${encodeURIComponent(clientName)}&clientEmail=${encodeURIComponent(clientEmail)}&clientSex=${encodeURIComponent(clientSex)}&clientAge=${encodeURIComponent(clientAge)}&clientHeight=${encodeURIComponent(clientHeight)}&clientWeight=${encodeURIComponent(clientWeight)}&clientActivityLevel=${encodeURIComponent(clientActivityLevel)}&clientCalorieTarget=${encodeURIComponent(clientCalorieTarget)}&clientNote=${encodeURIComponent(clientNote)}`
        })
            .then(response => {
                if (response.ok) {
                    clientNameCell.innerText = clientName;
                    clientEmailCell.innerText = clientEmail;
                    clientSexCell.innerText = clientSex;
                    clientAgeCell.innerText = clientAge;
                    clientHeightCell.innerText = clientHeight;
                    clientWeightCell.innerText = clientWeight;
                    clientActivityLevelCell.innerText = clientActivityLevel;
                    clientCalorieTargetCell.innerText = clientCalorieTarget;
                    clientNoteCell.innerText = clientNote;
                    actionCell.innerHTML = `<button onclick="editClient(${clientID})">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    // Function to INSERT entries in the Client table
    function addClient(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to add client. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add client.');
            });

        return false;
    }

    // Function to DELETE entries in the Client table
    function confirmDelete(clientID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/deleteclient/${clientID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('client-' + clientID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }
</script>

{% endblock %}