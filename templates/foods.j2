<!--
Citation for the following code:
Date: 06/06/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Original work with some Jinja expressions adapted from https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
-->

{% extends "template.j2" %}

{% block title %}Foods{% endblock %}

{% block content %}

<h3>Foods Listing</h3>

<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Type</th>
            <th>Calories Per Gram</th>
            <th>Note</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for food in foods %}
        <tr id="food-{{ food.foodID }}">
            <td>{{ food.foodID }}</td>
            <td>{{ food.foodName }}</td>
            <td>{{ food.foodType }}</td>
            <td>{{ food.foodCaloriesPerGram }}</td>
            <td>{{ food.foodNote }}</td>
            <td>
                <button onclick="editFood({{ food.foodID }})">Edit</button>
            </td>
            <td>
                <button onclick="confirmDelete({{ food.foodID }})">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<form method="POST" action="{{ url_for('foods') }}" onsubmit="return addFood(event)">
    <h3>Add Food</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Calories Per Gram</th>
                <th>Note</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="text" id="foodName" name="foodName" required></td>
                <td>
                    <select id="foodType" name="foodType" required>
                        <option value="Fruits">Fruits</option>
                        <option value="Vegetables">Vegetables</option>
                        <option value="Seafood">Seafood</option>
                        <option value="Dairy">Dairy</option>
                        <option value="Mushrooms">Mushrooms</option>
                        <option value="Grains">Grains</option>
                        <option value="Meat">Meat</option>
                        <option value="Spices">Spices</option>
                        <option value="Nuts">Nuts</option>
                        <option value="Greens">Greens</option>
                        <option value="Sweets">Sweets</option>
                        <option value="Oils and Sauces">Oils and Sauces</option>
                        <option value="Beverages">Beverages</option>
                        <option value="Alcohol">Alcohol</option>
                        <option value="Soups">Soups</option>
                        <option value="Baked Products">Baked Products</option>
                        <option value="Fast Foods">Fast Foods</option>
                        <option value="Meals and Recipes">Meals and Recipes</option>
                        <option value="Other">Other</option>
                    </select>
                </td>
                <td><input type="number" id="foodCaloriesPerGram" name="foodCaloriesPerGram" step="0.01" min="0.01"
                        required></td>
                <td><input type="text" id="foodNote" name="foodNote"></td>
                <td><button type="submit">Add</button></td>
            </tr>
        </tbody>
    </table>
</form>

<script>
    function editFood(foodID) {
        const row = document.getElementById('food-' + foodID);
        const [_, foodNameCell, foodTypeCell, foodCaloriesPerGramCell, foodNoteCell, actionCell] = row.cells;

        // Store the original values in case the edit is cancelled
        row.dataset.originalName = foodNameCell.innerText;
        row.dataset.originalType = foodTypeCell.innerText;
        row.dataset.originalCaloriesPerGram = foodCaloriesPerGramCell.innerText;
        row.dataset.originalNote = foodNoteCell.innerText;

        foodNameCell.innerHTML = `<input type="text" value="${foodNameCell.innerText}" required>`;
        foodTypeCell.innerHTML = `
            <select>
                <option value="Fruits">Fruits</option>
                <option value="Vegetables">Vegetables</option>
                <option value="Seafood">Seafood</option>
                <option value="Dairy">Dairy</option>
                <option value="Mushrooms">Mushrooms</option>
                <option value="Grains">Grains</option>
                <option value="Meat">Meat</option>
                <option value="Spices">Spices</option>
                <option value="Nuts">Nuts</option>
                <option value="Greens">Greens</option>
                <option value="Sweets">Sweets</option>
                <option value="Oils and Sauces">Oils and Sauces</option>
                <option value="Beverages">Beverages</option>
                <option value="Alcohol">Alcohol</option>
                <option value="Soups">Soups</option>
                <option value="Baked Products">Baked Products</option>
                <option value="Fast Foods">Fast Foods</option>
                <option value="Meals and Recipes">Meals and Recipes</option>
                <option value="Other">Other</option>
            </select>
        `;
        foodCaloriesPerGramCell.innerHTML = `<input type="number" step="0.01" min="0.01" value="${foodCaloriesPerGramCell.innerText}" required>`;
        foodNoteCell.innerHTML = `<input type="text" value="${foodNoteCell.innerText}">`;
        actionCell.innerHTML = `
            <button onclick="updateFood(${foodID})">Update</button>
            <button onclick="cancelEdit(${foodID})">Cancel</button>
        `;
    }

    function cancelEdit(foodID) {
        const row = document.getElementById('food-' + foodID);
        const [_, foodNameCell, foodTypeCell, foodCaloriesPerGramCell, foodNoteCell, actionCell] = row.cells;

        // Restore the original values
        foodNameCell.innerText = row.dataset.originalName;
        foodTypeCell.innerText = row.dataset.originalType;
        foodCaloriesPerGramCell.innerText = row.dataset.originalCaloriesPerGram;
        foodNoteCell.innerText = row.dataset.originalNote;

        actionCell.innerHTML = `<button onclick="editFood(${foodID})">Edit</button>`;
    }

    function updateFood(foodID) {
        const row = document.getElementById('food-' + foodID);
        const [_, foodNameCell, foodTypeCell, foodCaloriesPerGramCell, foodNoteCell, actionCell] = row.cells;

        const foodName = foodNameCell.firstElementChild.value;
        const foodType = foodTypeCell.firstElementChild.value;
        const foodCaloriesPerGram = foodCaloriesPerGramCell.firstElementChild.value;
        const foodNote = foodNoteCell.firstElementChild.value;

        if (foodCaloriesPerGram < 0.01) {
            alert('Calories per gram cannot be less than 0.01.');
            return;
        }

        fetch(`/updatefood/${foodID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `foodName=${encodeURIComponent(foodName)}&foodType=${encodeURIComponent(foodType)}&foodCaloriesPerGram=${encodeURIComponent(foodCaloriesPerGram)}&foodNote=${encodeURIComponent(foodNote)}`
        })
            .then(response => {
                if (response.ok) {
                    foodNameCell.innerText = foodName;
                    foodTypeCell.innerText = foodType;
                    foodCaloriesPerGramCell.innerText = foodCaloriesPerGram;
                    foodNoteCell.innerText = foodNote;
                    actionCell.innerHTML = `<button onclick="editFood(${foodID})">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    function addFood(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to add food. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add food.');
            });

        return false;
    }

    function confirmDelete(foodID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/deletefood/${foodID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('food-' + foodID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }
</script>

{% endblock %}