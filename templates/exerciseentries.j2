<!--
Citation for the following code:
Date: 06/06/2024
Authors: Rami Albaroudi and Mohamed Saud, Group 13
Original work with some Jinja expressions adapted from https://github.com/osu-cs340-ecampus/flask-starter-app?tab=readme-ov-file#dynamically-displaying-data-in-a-template
-->

{% extends "template.j2" %}

{% block title %}Exercise Entries{% endblock %}

{% block content %}
<h3>Exercise Entries Listing</h3>
<h4 style="text-align: center;"><i><b>Instructions:</b> You cannot modify an exercise entry's associated client or
        tracked day directly. Please delete and re-create the entry if those fields are incorrect.</i></h4>
<table>
    <thead>
        <tr>
            <th>Exercise Entry ID</th>
            <th>Tracked Day Date</th>
            <th>Client Name</th>
            <th>Exercise Name</th>
            <th>Type</th>
            <th>Calories</th>
            <th>Note</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        {% for exerciseentry in exerciseentries %}
        <tr id="exerciseentry-{{ exerciseentry.exerciseEntryID }}">
            <td>{{ exerciseentry.exerciseEntryID }}</td>
            <td>{{ exerciseentry.trackedDayDate }}</td>
            <td>{{ exerciseentry.clientName }}</td>
            <td>{{ exerciseentry.exerciseEntryName }}</td>
            <td>{{ exerciseentry.exerciseEntryType }}</td>
            <td>{{ exerciseentry.exerciseEntryCalories }}</td>
            <td>{{ exerciseentry.exerciseEntryNote }}</td>
            <td>
                <button onclick="editExerciseEntry({{ exerciseentry.exerciseEntryID }})">Edit</button>
            </td>
            <td>
                <button onclick="confirmDelete({{ exerciseentry.exerciseEntryID }})">Delete</button>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Add New Exercise Entry</h3>
<h4 style="text-align: center;"><i><b>Instructions:</b> You must first create the tracked day entry before attempting
        to add an exercise entry to that tracked day's log.</i></h4>
<form method="POST" action="{{ url_for('exerciseentries') }}" onsubmit="return addExerciseEntry(event)">
    <table>
        <thead>
            <tr>
                <th>Tracked Day Date</th>
                <th>Client Name</th>
                <th>Exercise Name</th>
                <th>Type</th>
                <th>Calories</th>
                <th>Note</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="date" id="trackedDayDate" name="trackedDayDate" required></td>
                <td>
                    <input type="text" id="searchClient" name="clientName" list="clientNames"
                        placeholder="Search Clients..." required>
                    <datalist id="clientNames">
                        {% for client in clients %}
                        <option value="{{ client.clientName }}">
                            {% endfor %}
                    </datalist>
                </td>
                <td><input type="text" id="exerciseName" name="exerciseName" required></td>
                <td>
                    <select id="type" name="type" required>
                        <option value="Cardio">Cardio</option>
                        <option value="Strength">Strength</option>
                        <option value="Stretching">Stretching</option>
                        <option value="Balance">Balance</option>
                        <option value="Other">Other</option>
                    </select>
                </td>
                <td><input type="number" id="calories" name="calories" min="1" required></td>
                <td><input type="text" id="note" name="note"></td>
                <td><button type="submit">Add</button></td>
            </tr>
        </tbody>
    </table>
</form>



<script>
    function editExerciseEntry(exerciseEntryID) {
        const row = document.getElementById('exerciseentry-' + exerciseEntryID);
        const [_, trackedDayDateCell, clientNameCell, exerciseNameCell, exerciseTypeCell, caloriesCell, noteCell, actionCell] = row.cells;

        // Store the original values in case the edit is cancelled
        row.dataset.originalExerciseName = exerciseNameCell.innerText;
        row.dataset.originalExerciseType = exerciseTypeCell.innerText;
        row.dataset.originalCalories = caloriesCell.innerText;
        row.dataset.originalNote = noteCell.innerText;

        exerciseNameCell.innerHTML = `<input type="text" value="${exerciseNameCell.innerText}" required>`;
        exerciseTypeCell.innerHTML = `
            <select required>
                <option value="Cardio" ${exerciseTypeCell.innerText === 'Cardio' ? 'selected' : ''}>Cardio</option>
                <option value="Strength" ${exerciseTypeCell.innerText === 'Strength' ? 'selected' : ''}>Strength</option>
                <option value="Stretching" ${exerciseTypeCell.innerText === 'Stretching' ? 'selected' : ''}>Stretching</option>
                <option value="Balance" ${exerciseTypeCell.innerText === 'Balance' ? 'selected' : ''}>Balance</option>
                <option value="Other" ${exerciseTypeCell.innerText === 'Other' ? 'selected' : ''}>Other</option>
            </select>
        `;
        caloriesCell.innerHTML = `<input type="number" value="${caloriesCell.innerText}" min="1" required>`;
        noteCell.innerHTML = `<input type="text" value="${noteCell.innerText}">`;
        actionCell.innerHTML = `
            <button onclick="updateExerciseEntry(${exerciseEntryID})">Update</button>
            <button onclick="cancelEdit(${exerciseEntryID})">Cancel</button>
        `;
    }

    function cancelEdit(exerciseEntryID) {
        const row = document.getElementById('exerciseentry-' + exerciseEntryID);
        const [_, trackedDayDateCell, clientNameCell, exerciseNameCell, exerciseTypeCell, caloriesCell, noteCell, actionCell] = row.cells;

        // Restore the original values
        exerciseNameCell.innerText = row.dataset.originalExerciseName;
        exerciseTypeCell.innerText = row.dataset.originalExerciseType;
        caloriesCell.innerText = row.dataset.originalCalories;
        noteCell.innerText = row.dataset.originalNote;

        actionCell.innerHTML = `<button onclick="editExerciseEntry(${exerciseEntryID})">Edit</button>`;
    }

    function updateExerciseEntry(exerciseEntryID) {
        const row = document.getElementById('exerciseentry-' + exerciseEntryID);
        const [_, trackedDayDateCell, clientNameCell, exerciseNameCell, exerciseTypeCell, caloriesCell, noteCell, actionCell] = row.cells;

        const exerciseName = exerciseNameCell.firstElementChild.value;
        const exerciseType = exerciseTypeCell.firstElementChild.value;
        const calories = caloriesCell.firstElementChild.value;
        const note = noteCell.firstElementChild.value;

        fetch(`/updateexerciseentry/${exerciseEntryID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `exerciseEntryName=${encodeURIComponent(exerciseName)}&exerciseEntryType=${encodeURIComponent(exerciseType)}&exerciseEntryCalories=${encodeURIComponent(calories)}&exerciseEntryNote=${encodeURIComponent(note)}`
        })
            .then(response => {
                if (response.ok) {
                    exerciseNameCell.innerText = exerciseName;
                    exerciseTypeCell.innerText = exerciseType;
                    caloriesCell.innerText = calories;
                    noteCell.innerText = note;
                    actionCell.innerHTML = `<button onclick="editExerciseEntry(${exerciseEntryID})">Edit</button>`;
                } else {
                    response.text().then(error => alert('Failed to update record. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to update record.');
            });
    }

    function addExerciseEntry(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    window.location.href = response.url;
                } else {
                    response.text().then(error => alert('Failed to add exercise entry. ' + error));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add exercise entry.');
            });

        return false;
    }

    function confirmDelete(exerciseEntryID) {
        if (confirm('Are you sure you want to delete this record?')) {
            fetch(`/deleteexerciseentry/${exerciseEntryID}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        document.getElementById('exerciseentry-' + exerciseEntryID).remove();
                    } else {
                        alert('Failed to delete record.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete record.');
                });
        }
    }
</script>

{% endblock %}